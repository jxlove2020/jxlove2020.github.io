[ { "title": "MSSQL 데이터베이스 정리 2", "url": "/posts/mssql-select/", "categories": "MSSQL", "tags": "MSSQL, 데이터베이스, 쿼리문", "date": "2022-04-20 21:10:00 +0900", "snippet": "MS_SQL SELECT제 기준 SQL Server 2016 with SP2 환경으로 설치하였습니다.MS_SQL Sample DatabasePubs DB 다운로드Pubs (책 판매와 출판에 대한 샘플 DB)Adventure Works DB 다운로드Adventure Works (자전거 회사에 대한 샘플 DB)SELECT 절pubs (책 판매와 출판에 대한 샘플 DB) 사용-- SELECT 기본형태SELECT stor_id, ord_num, qty, title_id FROM dbo.sales;-- WHERE 조건절 ( 7067 상점아이디가 속해 있는 값 가져오기 )SELECT * FROM dbo.sales WHERE store_id = 7067;-- 모든열 가져오기SELECT * FROM dbo.sales;-- 검색할 열의 순서 지정SELECT ord_date, ord_num, stor_id FROM dbo.sales;-- AS ( 별칭 사용 )SELECT stor_id AS &#39;상점아이디&#39;, qty AS &#39;판매수량&#39; FROM dbo.sales;-- AS 생략 가능SELECT ord_date &#39;주문날짜&#39; FROM dbo.sales;-- 새로운 열을 추가SELECT &#39;상점아이디 =&amp;gt;&#39; AS &#39;추가 열&#39;, stor_id FROM dbo.sales;-- 오름차순 정렬 ( ASCENDING )SELECT * FROM dbo.sales ORDER BY qty ASC;-- 내림차순 정렬 ( DESCENDING )SELECT * FROM dbo.sales ORDER BY qty DESC;중복데이터 걸러내기-- DISTINCT 사용SELECT DISTINCT * FROM dbo.sales;-- TOP 갯수 ( 상위개수 가져오기 )SELECT TOP 3 * FROM dbo.sales ORDER BY qty DESC; -- 100, 90, 80, 80, 80, 70 일때 상위 3개 만 가져오기-- TOP 갯수 에서 같은 값이면 잘려지는데, 잘려지지 않도록 하려면 WITH TIES 사용 ( 100, 90, 80, 80, 80, 70 일때 )SELECT TOP 3 WITH TIES * FROM dbo.sales ORDER BY qty DESC; -- 3개 이상의 값이 나올수 있다. ( 5개 출력 )-- 상위 10 퍼센트 데이터 가져오기SELECT TOP 10 PERCENT * FROM dbo.titles;SELECT 절 변수 선언-- DECLARE 로 변수 선언DECLARE @n INT=3;SELECT TOP(@n) stor_id, qty FROM dbo.sales ORDER BY qty DESC;SELECT TOP(@n) WITH TIES stor_id, qty FROM dbo.sales ORDER BY qty DESC;비교 연산자-- 크다 &amp;gt;, 작다 &amp;lt;, 같다 =, 크거나 같다 &amp;gt;=,작거나 같다 &amp;lt;=, &amp;lt;&amp;gt; 같지 않다.SELECT * FROM dbo.sales WHERE qty &amp;gt;= 25 ORDER BY qty DESC;-- BETWEENSELECT * FROM dbo.sales WHERE qty BETWEEN 25 AND 40 ORDER BY qty DESC;SELECT * FROM dbo.salesWHERE ord_dateBETWEEN &#39;1992-05-01&#39; AND &#39;1994-05-31&#39;ORDER BY ord_date;-- NOT BETWEENSELECT * FROM dbo.sales WHERE qty NOT BETWEEN 25 AND 40 ORDER BY qty DESC;-- 비교 연산자USE AdventureWorks -- AdventureWorks 데이터베이스 사용DECLARE @p_id int; -- INT 정수형 변수 선언SET @p_id = 750; -- 상품아이디 750 번 값 세팅IF (@p_id &amp;lt;&amp;gt; 0) -- 750 과 0은 값이 같지 않으므로 결과는 참이기 때문에 아래 쿼리문 수행 SELECT ProductID, Name, ProductNumber FROM Production.Product WHERE ProductID = @p_id;논리 연산자USE pubs -- pubs 데이터베이스 사용-- AND ( 두 조건 모두 참 이면 출력 )SELECT * FROM dbo.titles WHERE price &amp;gt; 15 AND type=&#39;psychology&#39; ORDER BY price;-- OR ( 둘 중 하나의 조건이 참 이면 출력 )SELECT * FROM dbo.titles WHERE price &amp;gt; 20 OR type=&#39;psychology&#39; ORDER BY price;-- NOT ( 조건을 만족하지 않는 것 출력 )SELECT * FROM dbo.titles WHERE NOT price &amp;gt; 15 ORDER BY price;집계함수COUNT 함수와 AVG 함수 는 NULL 은 제외하고 계산하기 때문에 주의 해야 한다.처음부터 NULL 을 제외하고 값을 계산하는게 좋다.USE pubs -- pubs 데이터베이스 사용-- COUNT ( 총 갯수 - NULL 포함 )SELECT COUNT(*) FROM dbo.titles;-- WHERE 절이 없어도 NULL 은 제외하고 계산SELECT COUNT(price) FROM dbo.titles;-- 처음부터 NULL 여부 체크후 가져오기SELECT COUNT(*) FROM dbo.titles WHERE price IS NOT NULL;-- AVG ( 평균 )SELECT AVG(price) FROM dbo.titles;-- SUM ( 합계 )SELECT SUM(price) / COUNT(price) FROM dbo.titles;SELECT SUM(price) / COUNT(*) FROM dbo.titles;SELECT SUM(price) / COUNT(*) FROM dbo.titles WHERE price IS NOT NULL;-- MAX ( 최대 ), MIN ( 최소 )SELECT MAX(price) FROM dbo.titles;SELECT MIN(price) FROM dbo.titles;" }, { "title": "MSSQL 데이터베이스 정리 1", "url": "/posts/mssql/", "categories": "MSSQL", "tags": "MSSQL, 데이터베이스, 쿼리문", "date": "2022-04-16 21:10:00 +0900", "snippet": "MS_SQL제 기준 SQL Server 2016 with SP2 환경으로 설치하였습니다.MS_SQL Sample DatabasePubs DB 다운로드Pubs (책 판매와 출판에 대한 샘플 DB)Adventure Works DB 다운로드Adventure Works (자전거 회사에 대한 샘플 DB)Pubs 데이터베이스 생성MS_SQL 2016 SSMS(Microsoft SQL Server management Studio) 를 실행하고다운 받은 instpubs.sql 파일을 열어서 실행 [F5] 시킵니다.다른 방법으로명령프롬프트 창에서 다운로드 받은 폴더로 이동해서 아래의 명령어를 실행시켜도 됩니다.&amp;gt; sqlcmd -i instpubs.sqlAdventure Works 데이터베이스 생성주의 ) MS_SQL 설치한 버전과 데이터베이스 백업 버전이 다를 경우 복원이 되지 않을 수 있습니다.다운 받은 AdventureWorks2016.bakC:\\Program Files\\Microsoft SQL Server\\MSSQL13.MSSQLSERVER\\MSSQL\\Backup 에 파일을 이동하거나 복사해 줍니다.MS_SQL 2016 SSMS(Microsoft SQL Server management Studio) 를 실행합니다.연결을 한 후데이터베이스 에서 오른쪽 마우스 버튼을 눌러 데이터베이스 복원 메뉴를 클릭합니다.일반 &amp;gt; 원본 &amp;gt; 디바이스 옵션에서 ... 을 클릭하여 백업디바이스 선택 창을 엽니다.백업미디어 에 추가 버튼을 클릭하여 백업파일을 찾아 확인 버튼을 눌러줍니다.백업미디어 에 추가된 파일이 뜨는 것을 확인하시고 확인 버튼을 눌러주면데이터베이스를 복원을 합니다. 데이터베이스를 복원 완료 했다는 창이 뜨면 복원이 완료 된 것입니다.데이터베이스 쪽에 AdventureWorks2016 데이테베이스가 생성되었는지 확인합니다.데이터 베이스 삭제개체 탐색기 에서 데이터 베이스 폴더의 생성된 데이터베이스 (Pubs 혹은 AdventureWorks2016) 를 선택하고오른쪽 마우스 버튼을 눌러 삭제 메뉴를 클릭하시면 삭제가 됩니다.데이터베이스 생성SSMS &amp;gt; 개체 탐색기 에서 데이터 베이스 생성새 데이터베이스 창에서 데이터 베이스 이름 설정 &amp;gt; TestDB소유자 &amp;gt; 기본값확인 버튼을 누르면 TestDB.mdf 와 TestDB.log.ldf 파일이 생성됨테이블 생성테이블 생성의 기본 형태 와 예시-- CREATE TABLE memberTbl (-- 컬럼명1 데이터형식 제약조건(NOT NULL),-- 컬럼명2 데이터형식 제약조건,-- 컬럼명3 데이터형식 제약조건-- );-- ex)CREATE TABLE memberTbl ( mem_id varchar(10) PRIMARY KEY, -- 영문만 입력되는게 명확하다면 varchar mem_name nchar(10) NOT NULL, -- nchar 는 한글이 들어올 수 있는 경우 mem_gender char(1) NOT NULL, -- 영문만 입력되는게 명확하다면 varchar mem_join date NOT NULL, -- date 형식 mem_address nvarchar(90), -- null 허용, 한글이 저장되기 때문에 nvarchar mem_email varchar(90) NOT NULL -- 영문만 입력되는게 명확하다면 varchar);테이블 컬럼 추가 및 삭제테이블 컬럼 추가 및 삭제 의 기본 형태 와 예시-- 추가-- ALTER TABLE memberTbl-- ADD 컬럼명1 데이터형식 제약조건(NOT NULL)-- GO-- ex) 컬럼 추가 - 새로운 컬럼은 마지막에 추가 됩니다.ALTER TABLE memberTbl ADD mem_point int NULL -- null 허용GOALTER TABLE memberTbl -- ADD mem_point int NOT NULL -- NOT NULL 을 추가 할 경우 DEFAULT 구문이 없으면 에러 발생 ADD mem_point int DEFAULT(&#39;0&#39;) NOT NULL -- 에러를 없애려면 DEFAULT 값을 주면 됩니다. -- ADD mem_point int IDENTITY(1, 1) NOT NULL -- 자동 증가값 IDENTITY(1, 1) 을 적용해 1씩 증가값을 줄 수도 있습니다. IDENTITY(1, 2) 를 하면 1부터 2씩 증가GO-- 여러 열 추가시 ADD 는 한번만 써주면 됩니다.ALTER TABLE memberTbl ADD mem_point int NULL, -- null 허용 mem_point2 int NULL, -- null 허용 mem_point3 int NULL -- null 허용GO-- 삭제-- ALTER TABLE memberTbl-- DROP COLUMN 컬럼명-- GO-- ex) 컬럼 삭제 - 해당 컬럼을 삭제 합니다.ALTER TABLE memberTbl DROP COLUMN mem_pointGO-- 여러 열 삭제ALTER TABLE memberTbl DROP COLUMN mem_point, mem_point2, mem_point3GO테이블 컬럼 데이터 형식 변경memberTbl 의 mem_point 컬럼의 데이터 타입을 int 에서 smallint 로 변경ALTER TABLE dbo.memberTbl ALTER COLUMN mem_point smallint;제약조건 삭제-- 테이블 에 디폴트 값이 있는 컬럼 추가 / nchar 이기 때문에 디폴트 값에서 N&#39;Novice&#39; 라 N을 앞에 써줍니다.ALTER TABLE dbo.memberTbl ADD mem_level nchar(10) DEFAULT(N&#39;Novice&#39;) NULL-- 테이블에 디폴트 값이 있는 것을 삭제하려고 하면 에러가 발생ALTER TABLE dbo.memberTbl DROP COLUMN mem_level-- 어떤 제약 조건이 있는 지 확인 : 제약 조건에서 이름 확인하여 복사EXEC sp_helpconstraint memberTbl;-- 제약조건의 이름을 확인하여 제약 조건 먼저 제거ALTER TABLE dbo.memberTbl DROP CONSTRAINT DF__memberTbl__mem_I__42E1EEFE-- 이제 제거하게 되면 제거가 잘 됩니다.ALTER TABLE dbo.memberTbl DROP COLUMN mem_level테이블의 컬럼 명 변경 쿼리-- EXEC sp_rename &#39;기존컬럼명&#39;, &#39;새 컬럼명&#39;, [&#39;COLUMN&#39; | &#39;OBJECT&#39;] -- 대괄호 안의 내용은 생략 가능 : COLUMN은 컬럼명 수정, OBJECT 는 테이블명 수정-- EXEC sp_rename &#39;memberTbl.mem_point&#39;, &#39;mem_pt&#39;, &#39;COLUMN&#39;EXEC sp_rename &#39;memberTbl.mem_point&#39;, &#39;mem_pt&#39;-- 기존 스크립트 및 저장 프로시저가 있는 경우 테이블의 컬럼명은 수정 되지만 스크립트 내의 써주었던 컬럼명은 수정되지 않으므로 주의가 필요하다.종속성개체 탐색기에서 테이블 우 클릭 메뉴에서 종속성 보기 누르면 테이블의 종속성 관계를 볼 수 있다.종속 개체 확인을 위한 함수 (Function) =&amp;gt; 데이터베이스 - 시스템 데이터베이스 - master - 프로그래밍기능 - 함수 - 시스템 함수 - 테이블반환함수EXEC sp_depends @objname=&#39;스키마.개체명(해당테이블)&#39;; -- 쿼리 창을 통해서 종속관계를 볼 수 있다. ( 이후 버전에서 제거 될 수 있음 )-- sys.dm_sql_referencing_entities-- sys.dm_sql_referenced_entitiesSELECT * FROM sys.dm_sql_referencing_entities (&#39;스키마.개체명(해당테이블)&#39;, &#39;OBJECT&#39;);GOSELECT * FROM sys.dm_sql_referenced_entities (&#39;스키마.개체명(해당테이블)&#39;, &#39;OBJECT&#39;);GO개체 타입(유형) 보기데이터베이스의 테이블 및 뷰, 함수, 트리거 등 개체의 타입을 볼수 있는 쿼리SELECT * FROM sys.objects;-- 필요한 것만 뽑아내기SELECT object_id, name, type, type_desc FROM sys.objects;종속성의 개체타입 보기Pubs (책 판매와 출판에 대한 샘플 DB) 에서 확인-- 필요한 부분만 뽑애내기SELECT referencing_schema_name, referencing_entity_name, referencing_id FROM sys.dm_sql_referencing_entities(&#39;dbo.titleauthor&#39;, &#39;OBJECT&#39;)SELECT object_id, name, type, type_desc FROM sys.objects-- 위의 필요한 부분들만 뽑아내서 합치기 ( INNER JOIN 사용 )SELECT a.referencing_schema_name, a.referencing_entity_name, b.name, b.type, b.type_descFROM sys.dm_sql_referencing_entities(&#39;dbo.titleauthor&#39;, &#39;OBJECT&#39;) AS a INNER JOIN sys.objects AS b ON a.referencing_id = b.object_id테이블 구조 확인EXEC sp_columns 테이블명; -- 테이블의 구조 정보 확인EXEC sp_help 테이블명; -- 테이블의 상세 정보 확인-- 시스템 테이블 쿼리 정보 : 해당 데이터베이스의 테이블의 시스템 테이블 에 sys.columns, sys.tables 위치SELECT * FROM sys.columns; -- 해당 데이터베이스의 컬럼 정보 - 전체가 다 나오니 WHERE 절과 ORDER BY 절 활용하여 사용SELECT * FROM sys.tables; -- 해당 데이터베이스의 테이블 정보-- 스키마 테이블 컬럼 정보 보기 : 해당 데이터베이스의 뷰 의 시스템 뷰 에 information_schema.columns 위치SELECT * FROM information_schema.columns업데이트 쿼리문-- 기본구조 - 업데이트에서 WHERE 문 필수, 조건절이 없으면 전체 데이터 변경 되므로 주의UPDATE 테이블명 SET 컬럼명 = 값 WHERE 조건;-- 디폴트 값이 업데이트 됨, 조건절이 없으면 전체 데이터 변경 되므로 주의UPDATE dbo.memberTbl SET mem_level=DEFAULT;-- 널 값으로 업데이트 됨, 조건절이 없으면 전체 데이터 변경 되므로 주의UPDATE dbo.memberTbl SET mem_level=DEFAULT;-- 조건절에 해당하는 mem_id=&#39;kim&#39; 의 데이터만 변경 됨UPDATE dbo.memberTbl SET mem_level=&#39;EXPERT&#39;, mem_point=7000 WHERE mem_id=&#39;kim&#39;;널 값 업데이트-- 기본 구조 , 조건절이 없으면 전체 데이터 변경 되므로 주의-- UPDATE 테이블명 SET 컬럼명 = ISNULL(컬럼명 , &#39;변경할 값&#39;) WHERE 조건;-- ISNULL : SQL SERVER 내장 함수 사용UPDATE dbo.memberTbl SET mem_point = ISNULL(mem_point, &#39;100&#39;);-- 바뀐것이 3개라 할지라도 업데이트 할 때 memberTbl 테이블의 개수가 7개 가 있었다면 결과창에서는 7개 행이 영향을 받음이라고 나옴-- 조회 할 때 값을 보기 좋게 하려면-- SELECT ISNULL(컬럼명, &#39;값없음&#39;) AS 컬럼별칭 FROM 테이블명으로 해줍니다.SELECT *, ISNULL(mem_level, &#39;값없음&#39;) AS 회원레벨 FROM dbo.memberTblUPPER(), LOWER() 함수-- 컬럼의 내용을 대문자로 변경UPDATE dbo.memberTbl SET mem_level = UPPER(mem_level);-- 컬럼의 내용을 소문자로 변경UPDATE dbo.memberTbl SET mem_level = LOWER(mem_level);-- 조회하거나 바로 보여줄 때 사용 방법SELECT UPPER(&#39;korea seoul&#39;); -- 결과 : KOREA SEOULSELECT LOWER(&#39;KOREA SEOUL&#39;); -- 결과 : korea seoul유니코드 형식 데이터 입력-- 데이터베이스 생성CREATE DATABASE TestDB2;GO-- TestDB2 데이터베이스 사용USE TestDB2;-- 테이블 생성CREATE TABLE dbo.testTable ( mem_num smallint NOT NULL, mem_nation nvarchar(25) NOT NULL, mem_hello nvarchar(30) NOT NULL, mem_birthday date, mem_income_tax money);-- INSERT DATA ( 데이터 입력 )INSERT TestDB2.dbo.testTableVALUES (1, N&#39;한국&#39;, N&#39;안녕하세요&#39;, &#39;2010-01-01&#39;, 1500.00), (2, N&#39;미국&#39;, N&#39;hello&#39;, &#39;2012-05-05&#39;, 2500.00), (3, N&#39;태국&#39;, N&#39;สวัสดี&#39;, &#39;2015-03-01&#39;, 1700.00), (4, N&#39;베트남&#39;, N&#39;xin chào&#39;, &#39;2010-01-01&#39;, 1200.00), (5, N&#39;중국&#39;, N&#39;你好&#39;, &#39;2010-01-01&#39;, 2000.00), (6, N&#39;일본&#39;, N&#39;こんにちは&#39;, &#39;2010-01-01&#39;, 1000.00);-- SELECT DATA ( 데이터 조회 )SELECT * FROM TestDB2.dbo.testTable;CONSTRAINT ( 제약조건 ) - IDENTITY, PRIMARY KEY, DEFAULT-- 데이터베이스 생성CREATE DATABASE TESTDB3;-- 작업 DB 변경USE TESTDB3-- 테이블 생성CREATE TABLE dbo.sampleTbl ( COL1 INT IDENTITY(100, 1) PRIMARY KEY, -- 기본값 100에서 1씩 증가값 입력 COL2 NVARCHAR(20) DEFAULT &#39;★ ♥ ★&#39; NULL, -- 기본값 &#39;★ ♥ ★&#39; 입력 COL3 NVARCHAR(20) NULL, COL4 DATE DEFAULT GETDATE(), -- 기본값 현재날짜 입력 COL5 TIME DEFAULT GETDATE(), -- 기본값 현재시각 입력);-- 데이터 입력INSERT INTO dbo.sampleTbl(COL3) VALUES (NULL);INSERT INTO dbo.sampleTbl(COL2, COL3) VALUES (&#39;대한민국&#39;, &#39;서울&#39;);-- 데이터 출력SELECT * FROM dbo.sampleTbl;-- 데이터베이스 삭제 ( 주의: USE MASTER 로 변경 후 삭제 )USE MASTERDROP DATABASE TESTDB3함수 사용SELECT * FROM dbo.sampleTbl;SELECT COL1, COL2, CLO3, COL4, LEFT(COL5, 8) AS &#39;시간&#39; FROM dbo.sampleTbl;-- CONVERT 함수 사용SELECT CONVERT(VARCHAR(8), GETDATE(), 108); -- 14:22:15SELECT CONVERT(VARCHAR(8), GETDATE(), 8); -- 8자리 시간 표시SELECT CONVERT(VARCHAR(10), GETDATE(), 10); -- 10자리 월일연 표시SELECT CONVERT(VARCHAR(8), COL5, 108) AS &#39;시간&#39; FROM dbo.sampleTbl;CONSTRAINT ( 제약조건 ) - UNIQUE-- 데이터베이스 생성CREATE DATABASE TESTDB4;-- 작업 DB 변경USE TESTDB4-- 테이블 생성 ( 직원 인사/퇴사 테이블 )CREATE TABLE dbo.employeeTbl ( mem_idx INT IDENTITY PRIMARY KEY, -- IDENTITY 만 써줘도 IDENTITY(1, 1) 와 같은 의미 mem_id CHAR(16) UNIQUE NOT NULL, -- 영문만 들어오는 경우 CHAR 사용 mem_name NVARCHAR(16) NOT NULL, -- 유니코드 지원 mem_s_date DATE NULL, -- 입사일 mem_e_date DATE NULL, -- 퇴사일 mem_reason NVARCHAR(50) DEFAULT N&#39;일신상의 사유&#39; -- 퇴사사유 mem_email VARCHAR(30) UNIQUE NOT NULL -- 이메일);-- 데이터 입력INSERT INTO dbo.employeeTbl VALUES(&#39;joseph&#39;, &#39;조셉&#39;, &#39;2020-11-10&#39;, &#39;2021-12-11&#39;, &#39;해외 이민&#39;, &#39;joseph@test.com&#39;);INSERT INTO dbo.employeeTbl (mem_id, mem_name, mem_s_date, mem_email) VALUES(&#39;jacob&#39;, &#39;제이콥&#39;, &#39;2015-10-15&#39;, &#39;jacob@test.com&#39;);INSERT INTO dbo.employeeTbl (mem_id, mem_name, mem_s_date, mem_e_date, mem_reason, mem_email) VALUES (&#39;david&#39;, &#39;데이빗&#39;, &#39;2018-05-05&#39;, &#39;2019-12-20&#39;, &#39;이직&#39;, &#39;david@test.com&#39;)-- 데이터 출력SELECT * FROM dbo.employeeTbl;-- 데이터베이스 삭제 ( 주의: USE MASTER 로 변경 후 삭제 )USE MASTERDROP DATABASE TESTDB4IDENTITY 값의 간격입력이 실패 되거나 또는 레코드 삭제에 따라서 IDENTITY 값의 간격이 생길 수 있습니다.( 같은 입력값을 다시 생성할 때 오류가 발생합니다. 그 때도 IDENTITY 값이 발생하는데 그 때 추가 되었던 부분이 사라진 값으로 적용되어1, 2, 3 에러 , 4, 5 이런식으로 간격이 발생되어 저장 됩니다. )간격이 발생하는 것을 없애려면SET IDENTITY_INSERT 를 ON 으로 설정-- IDENTITY 값을 명시적으로 입력하기 위해 옵션 변경 ON/OFF-- SET IDENTITY_INSERT 테이블명 ON/OFFSET IDENTITY_INSERT dbo.employeeTbl ON;-- 간격이 벌어진 부분이 3 이라고 가정했을 때INSERT INTO dbo.employeeTbl (mem_idx, mem_id, mem_name, mem_s_date, mem_email) VALUES(3, &#39;jhon&#39;, &#39;존&#39;, &#39;2017-09-15&#39;, &#39;john@test.com&#39;);SET IDENTITY_INSERT dbo.employeeTbl OFF;" }, { "title": "Python 자료구조와 JSON 데이터 처리", "url": "/posts/python_study/", "categories": "Python", "tags": "Python, 파이썬, API, 라이브러리, 딕셔너리", "date": "2022-03-17 21:10:00 +0900", "snippet": "Python 자료구조와 JSON 데이터 처리# 클라이언트와 서버 사이 데이터 교환시# 파이썬 객체 타입을 문자열 데이터로 변환# 파이썬 문자열 데이터를 파이썬 객체 타입으로 변환# 파이썬 대표적인 자료 구조 4개 =&amp;gt; List [], Tuple (), Dictionary {x: x}, Set {}파이썬 딕셔너리 타입# 파이썬 자료구조의 한 형태. &quot;키(key) : 값(value)&quot; 쌍을 요소로 갖는 컬렉션 객체# 키(key)를 통하여 빠르게 값(value)을 찾아내는 해시테이블(Hash Table) 구조를 가지는 객체# 파이썬에서 딕셔너리 객체는 &quot;dict&quot; 클래스 구현# 딕셔너리의 키(key)는 값을 변경할 수 없다. =&amp;gt; 즉, Immutable 속성# 딕셔너리의 값(value)은 둘 다 가능 =&amp;gt; 즉, Immutable, Mutable 모두 가능a = { &#39;name&#39;: &#39;Joseph&#39; }print( &#39;a =&amp;gt;&#39;, a )print( &#39;type(a) =&amp;gt;&#39;, type(a) ) # dictprint( &quot;type(a[&#39;name&#39;]) =&amp;gt;&quot;, type(a[&#39;name&#39;]) ) # strprint ( &#39;-&#39; * 50 ) # 구분선# a 의 dictionary 타입을 list 타입으로 변경b = list(a)print( &#39;b =&amp;gt;&#39;, b )print( &#39;type(b) =&amp;gt;&#39;, type(b) ) # listprint( &#39;b[0] =&amp;gt;&#39;, b[0] ) # nameprint( &#39;type(b[0]) =&amp;gt;&#39;, type(b[0]) ) # stra =&amp;gt; {&#39;name&#39;: &#39;Joseph&#39;}type(a) =&amp;gt; &amp;lt;class &#39;dict&#39;&amp;gt;type(a[&#39;name&#39;]) =&amp;gt; &amp;lt;class &#39;str&#39;&amp;gt;--------------------------------------------------b =&amp;gt; [&#39;name&#39;]type(b) =&amp;gt; &amp;lt;class &#39;list&#39;&amp;gt;b[0] =&amp;gt; nametype(b[0]) =&amp;gt; &amp;lt;class &#39;str&#39;&amp;gt;파이썬 제공 JSON 기본모듈# 파이썬 3.x 이상 버전 사용import json# 파이썬 dict 타입members ={ &#39;id&#39;: 1, &#39;name&#39;: &#39;Joseph&#39;, &#39;age&#39;: 43, &#39;email&#39;: &#39;jxlove2020@gmail.com&#39;}print (type (members))# 딕셔너리 타입을 JONS 문자열로 변환 =&amp;gt; json.dumps()jsonStr = json.dumps(members)print(jsonStr)# print(type(jsonStr)) # strprint ( &#39;-&#39; * 80 ) # 구분선# 문자열로 변환시 option 을 줄 수 있다. indent 를 주면 보기 좋게 변환이 된다.jsonStr2 = json.dumps(members, indent = 4)print(jsonStr2)# print(type(jsonStr2)) # str&amp;lt;class &#39;dict&#39;&amp;gt;{&quot;id&quot;: 1, &quot;name&quot;: &quot;Joseph&quot;, &quot;age&quot;: 43, &quot;email&quot;: &quot;jxlove2020@gmail.com&quot;}--------------------------------------------------------------------------------{ &quot;id&quot;: 1, &quot;name&quot;: &quot;Joseph&quot;, &quot;age&quot;: 43, &quot;email&quot;: &quot;jxlove2020@gmail.com&quot;}JSON 문자열을 객체로 변환 및 출력# 파이썬 3.x 이상 버전 사용import jsonstrMembers = &#39;{&quot;id&quot;: 1, &quot;name&quot;: &quot;Joseph&quot;, &quot;age&quot;: 43, &quot;email&quot;: &quot;jxlove2020@gmail.com&quot;}&#39;print( type(strMembers) ) # str# JSON 문자열 데이터를 딕셔너리 타입으로 변환jsonObj = json.loads( jsonStr )print(type(jsonObj))print(jsonObj)print(jsonObj[&#39;name&#39;])print ( &#39;-&#39; * 80 ) # 구분선# 반복문for v in jsonObj: print(v)&amp;lt;class &#39;str&#39;&amp;gt;&amp;lt;class &#39;dict&#39;&amp;gt;{&#39;id&#39;: 1, &#39;name&#39;: &#39;Joseph&#39;, &#39;age&#39;: 43, &#39;email&#39;: &#39;jxlove2020@gmail.com&#39;}Joseph--------------------------------------------------------------------------------idnameageemail딕셔너리 자료구조 반복문# 반복문에 키 와 값을 같이 표기 하고 싶을 때 items() 사용zooDict = {&#39;rabbit&#39;: 30, &#39;fox&#39;: 20, &#39;monkey&#39;: 30, &#39;lion&#39;: 5}for k, v in zooDict.items(): # print (k, v) print (f&quot;{k}이 {v} 마리 있습니다.&quot;)print ( &#39;-&#39; * 80 ) # 구분선# keys() 사용for k in zooDict.keys(): print (k)print ( &#39;-&#39; * 80 ) # 구분선# values() 사용for v in zooDict.values(): print (v)rabbit이 30 마리 있습니다.fox이 20 마리 있습니다.monkey이 30 마리 있습니다.lion이 5 마리 있습니다.--------------------------------------------------------------------------------rabbitfoxmonkeylion--------------------------------------------------------------------------------3020305딕셔너리 추가# 딕셔너리 추가 setdefault()nameDict = {&#39;lee&#39;: 37, &#39;song&#39;: 35, &#39;park&#39;: 40, &#39;jo&#39;: 33}nameDict.setdefault(&#39;son&#39;) # 키만 추가 했으므로 값은 None으로 입력됩니다nameDict.setdefault(&#39;jung&#39;, 28) # 키와 값이 모두 입력 됩니다.print(&#39;nameDict =&amp;gt;&#39;, nameDict)nameDict =&amp;gt; {&#39;lee&#39;: 37, &#39;song&#39;: 35, &#39;park&#39;: 40, &#39;jo&#39;: 33, &#39;son&#39;: None, &#39;jung&#39;: 28}딕셔너리 수정# 딕셔너리 수정 update()nameDict2 = {&#39;lee&#39;: 37, &#39;song&#39;: 35, &#39;park&#39;: 40, &#39;jo&#39;: 33}# nameDict2.update(&#39;lee&#39;=43) # 따옴표가 있으면 오류가 납니다.nameDict2.update(lee=43) # 따옴표를 빼고 사용print(&#39;nameDict2 =&amp;gt;&#39;, nameDict2)# 딕셔너리에 키가 없는 것을 수정하려고 하면 입력 처리가 됩니다.nameDict2.update(tom=43) # 따옴표를 빼고 사용print(&#39;nameDict2 =&amp;gt;&#39;, nameDict2)# 여러 항목 수정nameDict2.update(mini=25, juni=30) # 따옴표를 빼고 사용print(&#39;nameDict2 =&amp;gt;&#39;, nameDict2)nameDict2 =&amp;gt; {&#39;lee&#39;: 43, &#39;song&#39;: 35, &#39;park&#39;: 40, &#39;jo&#39;: 33}nameDict2 =&amp;gt; {&#39;lee&#39;: 43, &#39;song&#39;: 35, &#39;park&#39;: 40, &#39;jo&#39;: 33, &#39;tom&#39;: 43}nameDict2 =&amp;gt; {&#39;lee&#39;: 43, &#39;song&#39;: 35, &#39;park&#39;: 40, &#39;jo&#39;: 33, &#39;tom&#39;: 43, &#39;mini&#39;: 25, &#39;juni&#39;: 30}딕셔너리 수정 - 키가 숫자인 경우# 딕셔너리 수정 update()nameDict3 = {1: &#39;joy&#39;, 2: &#39;tomy&#39;, 3: &#39;suji&#39;} # 키가 숫자인 경우# nameDict2.update(3=emily) # 오류가 납니다.# update() 메서드 안의 딕셔너리를 {} 로 감싸준 후 수정nameDict3.update({3:&#39;roy&#39;})print(&#39;nameDict3 =&amp;gt;&#39;, nameDict3)nameDict3 =&amp;gt; {1: &#39;joy&#39;, 2: &#39;tomy&#39;, 3: &#39;roy&#39;}딕셔너리 선언# 빈 중괄호 사용emptyDict = {} # dictprint(type(emptyDict))&amp;lt;class &#39;dict&#39;&amp;gt;# 생성자 사용zooDict = dict(rabbit=30, lion=5, hippo=3)print(type(zooDict))&amp;lt;class &#39;dict&#39;&amp;gt;딕셔너리 변환# (1) 리스트를 딕셔너리로 변환animals = [ [&#39;rabbit&#39;, 3], [&#39;lion&#39;, 4 ], [&#39;hippo&#39;, 10] ]animals_dict = dict( animals )print( animals_dict )print( type(animals_dict) )print( &#39;-&#39; * 100, &#39;[구분선]&#39; )# (2) 튜플을 딕셔너리로 변환goods = ( (&#39;book&#39;, 1000), (&#39;bag&#39;, 20000), (&#39;pencil&#39;, 300) )goods_dict = dict( goods )print( goods_dict )print( type(goods_dict) )print( &#39;-&#39; * 100, &#39;[구분선]&#39; )# (3) 리스트안에 튜플을 딕셔너리로 변환, 튜플안에 리스트를 딕셔너리로 변환fruits = [ (&#39;grape&#39;, 10), (&#39;pineapple&#39;, 20), (&#39;mango&#39;, 5) ]fruits_dict = dict( fruits )print( fruits_dict )print( type(fruits_dict) ){&#39;rabbit&#39;: 3, &#39;lion&#39;: 4, &#39;hippo&#39;: 10}&amp;lt;class &#39;dict&#39;&amp;gt;---------------------------------------------------------------------------------------------------- [구분선]{&#39;book&#39;: 1000, &#39;bag&#39;: 20000, &#39;pencil&#39;: 300}&amp;lt;class &#39;dict&#39;&amp;gt;---------------------------------------------------------------------------------------------------- [구분선]{&#39;grape&#39;: 10, &#39;pineapple&#39;: 20, &#39;mango&#39;: 5}&amp;lt;class &#39;dict&#39;&amp;gt;출력 서식 기호fruits = {&#39;apple&#39;: 20, &#39;pear&#39;: 15, &#39;peach&#39;: 10}for key, value in fruits.items(): print(&quot;%s : %d , &quot; % (key, value), end=&#39;&#39;)print()for key in fruits.keys(): print(&quot;%s : %03d , &quot; % (key, fruits[key]), end=&#39;&#39;)print()apple : 20 , pear : 15 , peach : 10 ,apple : 020 , pear : 015 , peach : 010 ,키(key)와 값(value) 직접 추가 및 삭제# 파이썬 3.x 이상 버전 사용import jsongoods = { &#39;price&#39;: 50000, &#39;vegetable&#39;: [ &#39;cabbage&#39;, &#39;cucumber&#39;, &#39;carrot&#39;, &#39;lettuce&#39; ]}# goods.setdefault( &#39;fruit&#39; )# goods[&#39;fruit&#39;] = Nonegoods[&#39;fruit&#39;] = [ &#39;pear&#39;, &#39;orange&#39;, &#39;peach&#39;, &#39;apple&#39; ]print( goods )print( &#39;-&#39; * 125, &#39;[구분선]&#39; )print( json.dumps(goods, indent=4) )print( &#39;-&#39; * 125, &#39;[구분선]&#39; )# 삭제 =&amp;gt; remove() 메서드 사용.goods[&#39;fruit&#39;].remove(&#39;apple&#39;)print( goods )# 추가goods[&#39;fruit&#39;].append(&#39;new-apple&#39;)print( goods )# 항목을 완전 삭제 =&amp;gt; deldel goods[&#39;fruit&#39;]print( goods ){&#39;price&#39;: 50000, &#39;vegetable&#39;: [&#39;cabbage&#39;, &#39;cucumber&#39;, &#39;carrot&#39;, &#39;lettuce&#39;], &#39;fruit&#39;: [&#39;pear&#39;, &#39;orange&#39;, &#39;peach&#39;, &#39;apple&#39;]}----------------------------------------------------------------------------------------------------------------------------- [구분선]{ &quot;price&quot;: 50000, &quot;vegetable&quot;: [ &quot;cabbage&quot;, &quot;cucumber&quot;, &quot;carrot&quot;, &quot;lettuce&quot; ], &quot;fruit&quot;: [ &quot;pear&quot;, &quot;orange&quot;, &quot;peach&quot;, &quot;apple&quot; ]}----------------------------------------------------------------------------------------------------------------------------- [구분선]{&#39;price&#39;: 50000, &#39;vegetable&#39;: [&#39;cabbage&#39;, &#39;cucumber&#39;, &#39;carrot&#39;, &#39;lettuce&#39;], &#39;fruit&#39;: [&#39;pear&#39;, &#39;orange&#39;, &#39;peach&#39;]}{&#39;price&#39;: 50000, &#39;vegetable&#39;: [&#39;cabbage&#39;, &#39;cucumber&#39;, &#39;carrot&#39;, &#39;lettuce&#39;], &#39;fruit&#39;: [&#39;pear&#39;, &#39;orange&#39;, &#39;peach&#39;, &#39;new-apple&#39;]}{&#39;price&#39;: 50000, &#39;vegetable&#39;: [&#39;cabbage&#39;, &#39;cucumber&#39;, &#39;carrot&#39;, &#39;lettuce&#39;]}정렬 sort(), reverse()randomDict = { &#39;number&#39;: [4, 2, 5, 6, 1, 3, 7], &#39;alphabet&#39;: [&#39;f&#39;, &#39;d&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;]}print(&#39;원본 데이터 &#39;, randomDict)# sort 는 기본으로 오름차순으로 정렬됩니다randomDict[&#39;number&#39;].sort()randomDict[&#39;alphabet&#39;].sort()print(&#39;오름차순 정렬&#39;, randomDict)# reverse 는 정렬이 된 상태에서 하지 않으면 정렬이 되지 않은 상태에서 reverse 됩니다# randomDict[&#39;number&#39;].reverse()# randomDict[&#39;alphabet&#39;].reverse()randomDict[&#39;number&#39;].sort(reverse=True) # sort 에서 reverse 옵션을 주어 역정렬randomDict[&#39;alphabet&#39;].sort(reverse=True) # sort 에서 reverse 옵션을 주어 역정렬print(&#39;내림차순 정렬&#39;, randomDict)원본 데이터 {&#39;number&#39;: [4, 2, 5, 6, 1, 3, 7], &#39;alphabet&#39;: [&#39;f&#39;, &#39;d&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;]}오름차순 정렬 {&#39;number&#39;: [1, 2, 3, 4, 5, 6, 7], &#39;alphabet&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]}내림차순 정렬 {&#39;number&#39;: [7, 6, 5, 4, 3, 2, 1], &#39;alphabet&#39;: [&#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;]}딕셔너리 반복 - 중첩member_group = { &#39;name&#39;: &#39;동호회멤버&#39;, &#39;member_num&#39;: 5, &#39;members&#39;: { &#39;member1&#39;: &#39;토미&#39;, &#39;member2&#39;: &#39;제이&#39;, &#39;member3&#39;: &#39;조이&#39;, &#39;member4&#39;: &#39;로이&#39;, &#39;member5&#39;: &#39;수지&#39; }, &#39;features&#39;: [&#39;노래&#39;, &#39;댄스&#39;, &#39;기타&#39;, &#39;드럼&#39;, &#39;건반&#39;]}for key in member_group: if (type(member_group[key]) is dict): # is 대신 == 사용 가능 for k in member_group[key]: print(f&#39;{k} 은 {member_group[key][k]} 입니다.&#39;) elif(type(member_group[key]) == list): # == 대신 is 사용 가능 for item in member_group[key]: print(key, &quot;:&quot;, item) else: print(key, &quot;:&quot;, member_group[key])name : 동호회멤버member_num : 5member1 은 토미 입니다.member2 은 제이 입니다.member3 은 조이 입니다.member4 은 로이 입니다.member5 은 수지 입니다.features : 노래features : 댄스features : 기타features : 드럼features : 건반공공데이터 API 사용을 위한 파이썬 라이브러리# URL Encode 파이썬 3 에 내장되어 있음. urllibfrom urllib.parse import urlparse, urlunparse, parse_qs, parse_qsl# urlparse 임포트# urlparse =&amp;gt; url을 6개의 요소로 분석하여 반환url = urlparse(&#39;https://google.com:80/subpage/search.google?name=홍길동&amp;amp;password=1234#id001&#39;)print(url.scheme) # https 통신방식print(url.netloc) # google.com:80 서버주소print(url.port) # 80 포트번호print(url.params) #print(url.path) # 서버 상의 도큐먼트 위치print(url.query) # 쿼리스트링print(url.fragment) # 식별자print(&#39;-&#39; * 100)print(url)print(&#39;-&#39; * 100)print(url.geturl())print(&#39;-&#39; * 100)# urlunparse 임포트print(urlunparse(url))# qs =&amp;gt; query string# parse_qs 임포트 =&amp;gt; 딕셔너리 타입으로 반환print(&#39;-&#39; * 100)print(parse_qs(url.query))print(&#39;-&#39; * 100)# parse_qsl 임포트 =&amp;gt; 리스트 타입으로 반환print(parse_qsl(url.query))httpsgoogle.com:8080/subpage/search.googlename=홍길동&amp;amp;password=1234id001----------------------------------------------------------------------------------------------------ParseResult(scheme=&#39;https&#39;, netloc=&#39;google.com:80&#39;, path=&#39;/subpage/search.google&#39;, params=&#39;&#39;, query=&#39;name=홍길동&amp;amp;password=1234&#39;, fragment=&#39;id001&#39;)----------------------------------------------------------------------------------------------------https://google.com:80/subpage/search.google?name=홍길동&amp;amp;password=1234#id001----------------------------------------------------------------------------------------------------https://google.com:80/subpage/search.google?name=홍길동&amp;amp;password=1234#id001----------------------------------------------------------------------------------------------------{&#39;name&#39;: [&#39;홍길동&#39;], &#39;password&#39;: [&#39;1234&#39;]}----------------------------------------------------------------------------------------------------[(&#39;name&#39;, &#39;홍길동&#39;), (&#39;password&#39;, &#39;1234&#39;)]urllib.parse 사용하여 쿼리 스트링 값 변경# URL Encode 파이썬 3 에 내장되어 있음. urllibfrom urllib.parse import urlparse, urlunparse, parse_qs, parse_qsl, urlencode# urlparse 임포트# urlparse =&amp;gt; url을 6개의 요소로 분석하여 반환url = urlparse(&#39;https://google.com:80/subpage/search.google?name=홍길동&amp;amp;password=1234#id001&#39;)print(parse_qsl(url.query))test_qs = dict(parse_qsl(url.query))print(test_qs)test_qs[&#39;password&#39;] = &#39;5678&#39;print(test_qs)# urlencode 임포트 - 쿼리스트링 파라미터를 인코딩 하기 위해서 사용test_url= url._replace(query=urlencode(test_qs))print(test_url)print(urlunparse(test_url))[(&#39;name&#39;, &#39;홍길동&#39;), (&#39;password&#39;, &#39;1234&#39;)]{&#39;name&#39;: &#39;홍길동&#39;, &#39;password&#39;: &#39;1234&#39;}{&#39;name&#39;: &#39;홍길동&#39;, &#39;password&#39;: &#39;5678&#39;}ParseResult(scheme=&#39;https&#39;, netloc=&#39;google.com:80&#39;, path=&#39;/subpage/search.google&#39;, params=&#39;&#39;, query=&#39;name=%ED%99%8D%EA%B8%B8%EB%8F%99&amp;amp;password=5678&#39;, fragment=&#39;id001&#39;)https://google.com:80/subpage/search.google?name=%ED%99%8D%EA%B8%B8%EB%8F%99&amp;amp;password=5678#id001urlencode 와 doseq 옵션 사용# URL Encode 파이썬 3 에 내장되어 있음. urllibfrom urllib.parse import urlparse, urlunparse, parse_qs, parse_qsl, urlencode# urlparse 임포트# urlparse =&amp;gt; url을 6개의 요소로 분석하여 반환url = urlparse(&#39;https://google.com:80/subpage/search.google?name=홍길동&amp;amp;password=1234#id001&#39;)qs = parse_qs(url.query)print(qs) # 딕셔너리 타입 으로 반환print(&#39;-&#39; * 100)result1 = urlencode(qs)print(f&#39;result1 값은 {result1} 타입은 {type(result1)}&#39;) # 타입은 str, doseq 는 Falseprint(&#39;-&#39; * 100)result2 = urlencode(qs, doseq=True)print(f&#39;result2 값은 {result2} 타입은 {type(result2)}&#39;) # 타입은 str, doseq 는 Trueprint(&#39;-&#39; * 100)# doseq 옵션 상세params = {&#39;aaa&#39;: &#39;111&#39;, &#39;bbb&#39;: [&#39;222&#39;, &#39;333&#39;]}rst1 = urlencode(params)rst2 = urlencode(params, doseq=True)print(rst1)print(rst2){&#39;name&#39;: [&#39;홍길동&#39;], &#39;password&#39;: [&#39;1234&#39;]}----------------------------------------------------------------------------------------------------result1 값은 name=%5B%27%ED%99%8D%EA%B8%B8%EB%8F%99%27%5D&amp;amp;password=%5B%271234%27%5D 타입은 &amp;lt;class &#39;str&#39;&amp;gt;----------------------------------------------------------------------------------------------------result2 값은 name=%ED%99%8D%EA%B8%B8%EB%8F%99&amp;amp;password=1234 타입은 &amp;lt;class &#39;str&#39;&amp;gt;----------------------------------------------------------------------------------------------------aaa=111&amp;amp;bbb=%5B%27222%27%2C+%27333%27%5Daaa=111&amp;amp;bbb=222&amp;amp;bbb=333한글 인코딩 디코딩from urllib.parse import quote, unquoteqt = quote(&quot;대한민국&quot;)print(qt)# unqt = unquote(qt)unqt = unquote(&quot;%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD&quot;)print(unqt)%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD대한민국파이썬 모듈 설치# !pip install requests # requests 모듈 설치 ( 주피터노트북에서는 pip 앞에 ! 표를 붙여줘야 함 )from urllib.parse import urlencode, unquote # 내장 모듈import json # 내장 모듈import requests # requests 모듈을 설치해야 사용할 수 있음" }, { "title": "포토샵 - 기본설정", "url": "/posts/photoshop-setups/", "categories": "photoshop", "tags": "photoshop, 포토샵, setups, 설정", "date": "2022-02-25 21:10:00 +0900", "snippet": "포토샵 실행포토샵을 실행합니다.설정 창을 여는 방법은 메뉴에서 편집 -&amp;gt; 환경설정 -&amp;gt; 일반 을 차례대로 선택합니다.단축키 로 [Ctrl + K] 를 함께 눌러서 환경설정 창을 여는 방법도 있습니다.환경설정 창단위와 눈금자 탭 메뉴 설정환경설정 창에서 단위와 눈금자 탭에서단위 &amp;gt; 눈금자 - 픽셀 로 선택단위 &amp;gt; 문자 - 픽셀 로 선택안내선, 격자 및 분할 영역환경설정 창에서 안내선, 격자 및 분할 영역 탭에서격자 &amp;gt; 격자 간격을 100 픽셀 세분 10 으로 맞춰 줍니다.확인 버튼을 클릭하여 설정창을 닫아 줍니다.이렇게 기본 설정을 마치고 사용하시면 디자인 하실 때 편하실 거에요 ~ ^^" }, { "title": "AWS putty 연결", "url": "/posts/aws-putty/", "categories": "aws", "tags": "aws, putty, PuTTYgen", "date": "2022-02-16 21:10:00 +0900", "snippet": "PuTTYgen 실행 - Priavate key 생성PuTTYgen 을 실행하고Load 버튼을 누릅니다.All Files( _ . _ ) 선택 하면 aws 인스턴스 생성시 만들어 놓은 key 파일을 불러옵니다.열기버튼을 누르게 되면 공지 창이 보이면서 Successfully 라는 내용이 보입니다. 확인버튼을 누릅니다.확인 버튼을 누르면 Key 부분 (검정색박스부분) 에 생성된 Key 가 보입니다.Save private key 버튼을 눌러서 적당한 이름으로 ppk 로 저장합니다.예 버튼을 누릅니다.적당한 이름으로 ppk를 저장합니다. ( 저는 그냥 pem 파일과 같은 이름으로 저장했습니다. )PuTTY 접속PuTTY 를 실행합니다.아마존 웹서비스에서 ec2 인스턴스 생성시ubuntu 서버를 선택했다면 ubuntu@ip 주소로 Host Name을 사용하고 Open 하면 로그인이 되며aws 서버를 선택했다면 ip 주소로 Host Name 을 사용한 후 Open 하면로그인 하라고 메시지가 나오는데 로그인 ID 를 ec2-user 로 사용합니다.SSH &amp;gt; Auth 로 가서 위에서 생성했던 ppk 파일을 불러옵니다.Open 버튼을 누르면 창이 열리면서 로그인이 되었다는 표시가 나옵니다.명령어를 사용하여 설치되어 있는 패키지들이 업데이트된게 있는지 확인하고 업그레이드 해줍니다.sudo apt-get updatesudo apt-get upgrade" }, { "title": "깃허브 블로그 만들기", "url": "/posts/blog/", "categories": "github", "tags": "github, blog, theme, 깃허브블로그, 테마", "date": "2022-02-14 21:10:00 +0900", "snippet": "깃허브 블로그깃허브 페이지 repository 를 생성Owner 는 jxlove2020, jxlove2020.github.io 로 repository 생성 Settings 탭 메뉴 클릭Page 설정 에서 Source 항목의 Branch 를 main 으로 바꿔주고 Save 합니다. 이렇게 하면 깃허브 페이지가 생성이 됩니다.Ruby 설치https://rubyinstaller.org/downloads/ 사이트에서루비를 다운로드 받아 설치해 줍니다.루비는 받아야 할 테마가 지원하는 것으로 받아줍니다.최신것이 지원이 안되는 경우가 있으므로 주의해야 합니다.사이트를 만들어줄 경로에서 터미널을 열어줍니다.인코딩을 합니다.# 명령어를 입력하면 응답메시지가 Active code page: 65001 라고 나옵니다.&amp;gt; chcp 65001Active code page: 65001Jekyll 설치# jekyll 및 bundle 을 설치 해줍니다.&amp;gt; gem install jekyll bundler github-pages&amp;gt; gem install webrick# jekyll 생성 - 기본 파일들이 생성되어집니다. ( 기본 테마 생성시킬 때 사용 )# &amp;gt; jekyll new ./ --force # 테마를 가져와서 사용할 땐 충돌 나거나 에러 생길 수 있음# bundle install&amp;gt; bundle install# jekyll 서버 동작&amp;gt; bundle exec jekyll serve실행시 오류가 날 경우 ------------------------------------------------Jekyll 4.2.1 Please append `--trace` to the `serve` command for any additional information or backtrace. ------------------------------------------------# ruby 3.0.0부터 webrick이 기본으로 포함된 gem에서 빠졌기 때문에 추가 해줍니다.&amp;gt; bundle add webrick# 다시 서버를 실행 해본다.&amp;gt; bundle exec jekyll serve# 실행 주소가 뜨면 클릭해서 들어가 봅니다.Server address: http://127.0.0.1:4000/# Welcome to Jekyll! 이라고 브라우저 화면이 뜨면 성공입니다.jekyll-theme-chirpy 테마를 선택https://github.com/cotes2020/jekyll-theme-chirpy 에 접속하여 코드를 다운받습니다.압축을 풀고, 폴더 안의 모든 내용을 복사하여, local 폴더 안에 붙여 넣어줍니다.테마 적용# 파일이 추가 되었으니 다시 bundle install 해 주고&amp;gt; bundle install# 지킬로컬 서버를 실행하면&amp;gt; bundle exec jekyll serve# 실행이 됩니다.# 브라우저 화면에 기존과 다른 UI 가 나오며 Getting Started 가 나오면 성공_config.yml 파일# import하는 테마 명입니다. 디폴트로 사용중인 테마 명이 들어가 있습니다.theme: jekyll-theme-chirpybaseurl: &quot;&quot; # 사용자 페이지를 만들었을 경우, 빈칸으로 둡니다.lang: ko-KR # 사용하는 언어 설정을 진행합니다.# http://www.lingoes.net/en/translator/langcode.htm 로 접속하여 확인가능합니다.timezone: Asia/Seoul #timezone설정입니다.# http://www.timezoneconverter.com/cgi-bin/findzone/findzone 에서 확인가능합니다.# jekyll-seo-tag settings › https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/usage.md# --------------------------title: Joseph.Note # 블로그 이름입니다. 설정하면 브라우저 상단에 설정된 이름이 확인가능합니다.tagline: think different # 서브 타이틀 입니다. 설정하면 블로그 첫 페이지 좌측에서 확인 가능합니다.description: &amp;gt;- # &quot;used by seo meta and the atom feed&quot;라고 나옵니다. 설정을 그대로 둡니다.. A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.url: &quot;https://jxlove2020.github.io&quot; # &#39;https://username.github.io&#39;와 같이 설정합니다. # 잘 적어넣도록 합니다.github: username: jxlove2020 # 본인의 github username을 적습니다.#twitter:# username: twitter_username # 본인의 twitter username을 적습니다.social: # Change to your full name. # It will be displayed as the default author of the posts and the copyright owner in the Footer name: Joseph email: nels1004@naver.com # change to your email address links: # The first element serves as the copyright owner&#39;s link #- https://twitter.com/username # change to your twitter homepage - https://github.com/jxlove2020 # change to your github homepage # Uncomment below to add more social links # - https://www.facebook.com/username # - https://www.linkedin.com/in/username # 상단은 social관련 내용입니다. 본인의 이름, 이메일, 링크 등을 작성합니다. 저는 깃허브만 올려두었습니다.google_site_verification: 000 # Google Search Console관련 내용입니다.# ↑ --------------------------google_analytics: id: &quot;000&quot; # Google Analytics ID입니다. pv: proxy_endpoint: cache_path:theme_mode: # chirpy테마는 [light|dark]테마를 지원합니다. 비워두시면 사용자의 디폴트 값이 설정되고, light 또는 dark로 입력해두시면 페이지의 기본 테마가 설정됩니다.img_cdn: &quot;&quot; #cdn 이미지 설정입니다. 저는 따로 진행하지 않았으나 진행하시려면 url을 작성해주시면 됩니다.avatar: /assets/img/profile.png # 대표이미지 라고 생각하시면 됩니다. /assets/img경로에 사진을 넣은 뒤 작성하시면 됩니다.toc: true # toc(Table of contents)입니다. 블로그 보시다 보면 포스팅 옆에서 스크롤을 따라오는 목차같은 녀석이 있습니다. # 사용하시려면 true, 아니라면 false를 적으시면 됩니다.disqus: comments: true # disqus라는 덧글기능을 하는 녀석입니다. 사용하시려면 true, 아니라면 false를 적으시면 됩니다. shortname: &quot;Joseph.Note&quot; # 사용하신다면 https://disqus.com/ 에 가입 후, shortname을 넣어줍니다.paginate: 10# ------------------------------사이트 정리 ( 파일 삭제 및 추가 작업 )# jekyll-theme-chirpy의 제작자의 안내# 1) .travis.yml 파일 삭제# 2) _posts 폴더 안의 파일 삭제# 3) docs 폴더 삭제 ( docs 폴더가 없을수도 있음 )# 4) .github폴더 안의 workflows폴더를 제외한 나머지 폴더 및 파일 삭제# 5) .github &amp;gt; workflows 폴더에서 ci.yml파일, issue-pr-interceptor.yml파일 2개 삭제# 6) .github &amp;gt; workflows 폴더에서 pages-deploy.yml.hooc 파일을 .hooc 확장자를 지워 pages-deploy.yml 로 만들어줍니다.# 7) .github &amp;gt; workflows 폴더에서 pages-deploy.yml.hooc 파일을 열고name: &quot;Automatic build&quot;on: push: branches: - main # 이 부분이 master 라고 되어 있다면 main으로 수정 paths-ignore: - .gitignore - README.md - LICENSE ...배포깃허브에 배포 하게 되면 Automatic build 를 통해서 깃허브에서 빌드를 하고gh-pages 브랜치도 생성하게 됨배포 시간은 4분 ~ 7분 정도 걸림배포가 완료 되면 사이트가 보이게됩니다.사이트가 안나오고 이렇게 보인다면— layout: home # Index page —깃허브에서 Settings 탭 메뉴 클릭Page 설정 에서 Source 항목의 Branch 를 gh-pages 로 바꿔주고 Save 합니다.잠시 기다리면 멋진 블로그 페이지가 모습을 드러냅니다." }, { "title": "도커 (docker) - 설치하기", "url": "/posts/docker/", "categories": "docker", "tags": "docker, 도커, install, 설치", "date": "2022-01-27 21:10:00 +0900", "snippet": "Ubuntu로 도커 설치아래의 명령어를 사용하여 도커 설치에 필요한 패키지들을 설치$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common패키지 저장소 추가도커의 공식 GPG 키와 저장소를 추가$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -$ sudo add-apt-repository \\ &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable&quot;도커 패키지가 검색되는지 확인$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-cache search docker-ce아래의 내용이 출력되면 성공docker-ce - Docker: the open-source application container engine도커 ce 설치도커 CE 에디션을 설치 (커뮤니티 에디션 - 개인개발자나 작은 팀이 도커 시작할 때 적합 - 무료)$ sudo apt-get update$ sudo apt-get install docker-ce docker-ce-cli containerd.io잘 설치 되었는지 확인$ sudo docker version접속한 계정의 사용자를 docker그룹에 추가$ sudo usermod -aG docker $USER옵션 -aG는 그룹에 추가한다는 의미도커 재실행$ sudo service docker restart" }, { "title": "포토샵 - 격자 간격 조정", "url": "/posts/photoshop-gird-ruler/", "categories": "photoshop", "tags": "photoshop, 포토샵, grid, 격자, ruler, 자, setting, 설정", "date": "2022-01-26 21:10:00 +0900", "snippet": "눈금자 표시눈금자 표시를 합니다. Ctrl + R (컨트롤 키와 R 키)로 단축키를 사용하면 편리합니다.안내선을 표시하려면 눈금자가 있어야 합니다.격자 표시격자 표시를 켭니다. Ctrl + &#39; (컨트롤 키와 홑따옴표 키)로 단축키를 사용하면 편리합니다.격자 표시가 있으면 안내선이 격자에 달라붙어서 안내선 표시하기가 더 쉬워집니다.안내선 이 원하는 위치에 달라붙게 하기 위해서 격자 간격을 조절할 필요가 있습니다.격자 간격 환경 설정편집 &amp;gt; 환경설정 &amp;gt; 단위와 눈금자 메뉴를 클릭합니다.환경설정 창이 뜨면 격자 부분의 격자 간격 설정 부분을 원하는 픽셀 간격으로 조절해 줍니다.격자 간격의 초기 설정 값이 밀리미터로 되어 있을텐데 픽셀로 변경하여 원하는 간격에 맞출 수 있도록 변경해 줍니다.눈금자에서 마우스 포인터를 드래그 하여 안내선을 표시 해 줍니다.원하는 곳에 안내선이 잘 표시 됩니다.이제 안내선에 맞게 디자인을 하면 됩니다. ^^" }, { "title": "포토샵 - path text ( 패스를 따라서 텍스트 작성 )", "url": "/posts/photoshop-path-text/", "categories": "photoshop", "tags": "photoshop, 포토샵, path, text, 패스, 텍스트", "date": "2022-01-20 21:10:00 +0900", "snippet": "패스 텍스트원의 모양에 맞게 글자를 써보도록 하겠습니다.잘 응용하면 멋진 엠블럼을 만들 수 있습니다.텍스트도구 밑에 있는 타원 도구를 활용하여 먼저 원을 그려줍니다.텍스트도구를 클릭하면 네모난 사각형에 I 표시가 나타납니다.이때는 클릭하여 빈곳에 글자를 쓸수 있습니다.원(도형)의 안쪽에 커서를 가져가면 원형에 I 표시가 나타납니다.이때는 원(도형) 안에 글자가 씌여 집니다.원 가까이 가져가면 물결모양의 표시와 I 표시가 나타납니다.이 때는 원형이면 원형대로 패스면 패스의 모양대로 글자가 씌어집니다.글자가 원하는 위치에 들어가지 않기 때문에 회전시켜줘야 하는데패스 선택 도구를 선택하여 글자 가까이 가져가면 회전 시킬수 있습니다.이때 레이어는 텍스트 레이어가 선택되어져 있는 상태여야 합니다.회전을 시킬 때 주의 할 점은커서가 도형 안쪽에 있거나 바깥 쪽에 있을 때 글자가 반대로 돌아가는 경우가 있는데당황하지 말고 안쪽에 있을땐 바깥쪽으로 바깥쪽에 있을 땐 안쪽으로 드래그 해주면 됩니다.적당히 회전을 시키면 적용된 결과물이 나타납니다.도형과 텍스트가 너무 붙어 있으면텍스트 레이어를 선택한 후에 Ctrl + T 를 눌러서 자유변형을 시켜줍니다.Alt 키를 누르고 우측상단을 드래그 해주면 모양을 유지하면서 늘려줄 수 있습니다.이렇게 원과 글자의 간격을 조절해 줄 수 있습니다.엠블럼 의 모양을 예쁘게 디자인해서 완성시켜 보아요 ^^" }, { "title": "Photoshop - Layer mask", "url": "/posts/photoshop/", "categories": "photoshop", "tags": "photoshop, 포토샵, layer, mask, 레이어, 마스크", "date": "2022-01-04 21:10:00 +0900", "snippet": "Photoshop 설치 Photoshop 다운 받으러가기다운 받은 Photoshop 을 설치합니다.레이어 마스크이미지와 글자의 위치를 잡습니다.의 이미지 레이어 순서를 변경합니다.이미지 레이어 위치 에서 alt 키를 누르고 마우스를 글자레이어로 이동시키면 아래와 같은 표시가 나옵니다.이 때 클릭하면 레이어 마스크가 적용되며적용된 결과물이 나타납니다.현재는 글자에 이미지를 적용했지만 응용하여 사각형 모양의 셰이프에 적용할 수도 있고 별모양의 셰이프에 적용할 수도 있습니다.그림을 옮겨 보면 셰이프의 위치는 그대로 있고 그림이 보이는 위치를 이동시킬 수 있습니다." }, { "title": "맥북프로 한영키 우측Command 키로 변환방법", "url": "/posts/mac-customKey/", "categories": "dev", "tags": "mac, 맥, 맥북, setting, 설정, customKey, 커스텀, 키", "date": "2021-12-29 21:10:00 +0900", "snippet": "한영키 설정 변경brew 로 karabiner-elements 설치하기brew install --cask karabiner-elements설치가 완료되면 허용하라는 알림 팝업창이 뜹니다.허용을 눌러주시구요시스템 환경설정 &amp;gt; 보안 및 개인 정보보호 &amp;gt; 개인정보보호 탭에서입력 모니터링 - 키보드 모니터링 하는 것을 허용합니다.일반 탭에서도 하단에 앱 허용 App Store 및 확인된 개발자 에karabiner app 관련 안내문이 나오면 허용 버튼을 눌러줍니다.lunchpad &amp;gt; karabiner-elements 아이콘을 클릭합니다.우측 Command 버튼을 f18 로 설정합니다. (우측 Command 클릭하면 설정됩니다.)이렇게 설정하면 오른쪽 Command 버튼으로 한글 전환이 가능해 집니다." }, { "title": "개발자 맥북프로 초기 설정", "url": "/posts/macbook-pro/", "categories": "dev", "tags": "mac, 맥, 프로, 초기화, setting, 설정, visualstudio, code, 비주얼스튜디오, 코드", "date": "2021-12-28 21:10:00 +0900", "snippet": "맥북프로 초기화맥북프로 초기화 하기 ( Option + command + R )자신이 사용하고 있는 맥북에서 호환되는 가장 최신 버전의 macOS 로 복구 할 수 있습니다.macOS 버전에 따라서 설치가 안되거나 실행이 안되는 프로그램이 있을 수 있으니가능한 최신 버전을 설치하는게 좋은 것 같아요.크롬 설치저는 맥북프로 에서 safari 브라우저대신 크롬 브라우저를 설치해서 사용합니다.크롬브라우저 설치 페이지크롬 브라우저를 다운로드 받은 후에 설치, 실행하여 기본 브라우저로 설정해 줍니다.비주얼 스튜디오 설치에디터를 설치합니다.비주얼스튜디오 코드 설치 페이지비주얼스튜디오 코드를 다운로드 받은 후에 설치하여 기본 설정해 줍니다.brew 설치Homebrew 홈 페이지를 방문합니다./bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;코드 블록에 있는 내용을 복사하여 터미널에 붙여넣기 하면 설치가 됩니다.brew --version 명령어로 버전을 확인합니다." }, { "title": "Visualstudio Code 설치하기", "url": "/posts/visual-studio-code/", "categories": "dev", "tags": "visualstudio, code, 비주얼스튜디오, 코드, extension, 확장, 설치, prettier, format, 포맷, 설정", "date": "2021-12-27 21:10:00 +0900", "snippet": "Visualstudio Code 설치하기 visualstudio code 다운 받으러가기다운 받은 visualstudio code 를 설치합니다.Extensions 설치하기 Auto Rename Tag쌍을 이루는 HTML 태그의 이름을 자동으로 바꿉니다. Beautify비주얼 스튜디오 코드에서 javascript, JSON, CSS, Sass 및 HTML 등 들여쓰기 정리 Brackets Light에디터의 밝은 색 테마 지원 Bracket Pair Colorizer일치하는 브래킷을 색상으로 식별 할 수 있습니다. Color Highlightrgb 칼라 코드의 텍스트 배경색을 해당 색상으로 보여줍니다. CSS Navigation특정 HTML 영역에서 Ctrl + 마우스 왼쪽버튼을 눌러 연결된 CSS 확인 CSS Peek소스 코드 내의 문자열에서 발견되는 css/scss/less (클래스 및 ID) 에 대한 정의로 이동 Debugger for Chrome크롬 개발자 도구에서 디버깅하는 것을 VS Code 에서 할 수 있습니다. Font Awesome Auto-complete &amp;amp; Preview폰트 어썸 아이콘을 실시간으로 미리 보여줌 html tag wrapper상위 태그를 자동으로 감싸줌. 그룹할 태그를 드래그해 Ctrl + i 로 선택 Korean Language Pack for Visual Studio Code비주얼 스튜디오 코드의 한국어 팩 Visual Studio IntelliCode자동완성 추천 기능으로 별표가 표시 되어 나옴 Live Server웹서버를 통해 결과물을 브라우저에 실시간으로 보여줌 Power Mode코드를 입력할 때 특수 효과를 적용함. Prettier - Code formatter일관된 코드 스타일을 적용할 수 있게 도와줍니다. Python파이썬 Pylance파이썬 IntelliCode Jupyter주피터 노트북 사용할 수 있게 해줍니다. vscode icons에디터의 내비게이션 아이콘 모양을 변경함비주얼스튜디오 폴더 View 변경 방법기존 폴더 View 방식이 조금 불편하여 설정을 변경하려 합니다.설정에서 compact 찾기 하면 아래와 같이 나옵니다.compact folders 부분을 체크 해제 하게 되면 폴더 View 방식이 아래와 같이 변경됩니다.Prettier 설치 후 Format 변경visual studio code 화면에서 톱니바퀴 모양의 설정 버튼을 눌러 아래와 같은 화면을 띄웁니다.단축키로는 ctrl + , 버튼을 함께 누릅니다.format 이라고 검색을 하면아래와 같은 화면이 나옵니다.Editor: Default Formatter 에는 Prettier - Code formatter 를 찾아서 선택해 줍니다.Editor: Format On Save 에 체크해 줍니다." }, { "title": "2022년 계획", "url": "/posts/plan/", "categories": "diary", "tags": "plan, 플랜, 계획", "date": "2021-12-22 21:10:00 +0900", "snippet": " 부모님과 보내는 시간 늘리기 전화 자주하기 방문해서 부모님과 아이들이 함께 하는 시간 갖기 기념일 잘 챙기기 부모님과 여행 하는 시간 갖기 내 몸 건강 챙기기 나 혼자만의 시간 갖기 ( 새벽에라도 ) 출퇴근길 걷기 ( 20분 정도 ) 아이들과 함께 산책하기 가정에서의 역할 잘하기 아내와 대화하는 시간 갖기 집안일 스스로 찾아서 하기 ( 요리, 청소, … ) 아이들과 놀아주는 시간 갖기 ( 보드게임, 인라인, 책 읽어주기, 그림그리기, 종이접기 ) 좋은 습관 만들기 일단 시작하기 메모하기 ( 블로그, 유튜브, 노션 ) 메모한 것 보기( 자주 들여다 볼수 있도록 - 포스트잇, 포스터 붙여놓기 ) 교육 아이들과 영어 동화책 읽기 일반도서 읽기 온.오프라인 교육 ( 유튜브 강좌, 온라인 교육 … ) 일 생각 정리해서 말하기 데이터 분석 스킬 기르기 GIS 지도 Open API Study 재테크 저축하기 재테크, 경제 관련 관심 갖기 " }, { "title": "CRA (create-react-app) 초기 세팅", "url": "/posts/create-react-app/", "categories": "react", "tags": "react, cra, create-react-app", "date": "2021-12-14 21:10:00 +0900", "snippet": "create react app 설치npx create-react-app .npm i react-router-domapp.jsimport &quot;./App.css&quot;;import { BrowserRouter, Routes, Route } from &quot;react-router-dom&quot;;import Header from &quot;./components/Header&quot;;import Main from &quot;./components/Main&quot;;import Profile from &quot;./components/Profile&quot;;import NotFound from &quot;./components/NotFound&quot;;function App() { return ( &amp;lt;div className=&quot;App&quot;&amp;gt; &amp;lt;BrowserRouter&amp;gt; &amp;lt;Header /&amp;gt; &amp;lt;Routes&amp;gt; &amp;lt;Route path=&quot;/&quot; element={&amp;lt;Main /&amp;gt;}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&quot;/profile/*&quot; element={&amp;lt;Profile /&amp;gt;}&amp;gt;&amp;lt;/Route&amp;gt; {/* 상단에 위치하는 라우트들의 규칙을 모두 확인, 일치하는 라우트가 없는경우 처리 */} &amp;lt;Route path=&quot;*&quot; element={&amp;lt;NotFound /&amp;gt;}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;/Routes&amp;gt; &amp;lt;/BrowserRouter&amp;gt; &amp;lt;/div&amp;gt; );}export default App;componentsHeader.jsimport React from &quot;react&quot;;import { Link } from &quot;react-router-dom&quot;;function Header(props) { return ( &amp;lt;div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;Link to=&quot;/&quot;&amp;gt; &amp;lt;li&amp;gt;메인페이지&amp;lt;/li&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;Link to=&quot;/profile&quot;&amp;gt; &amp;lt;li&amp;gt;프로필 페이지&amp;lt;/li&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; );}export default Header;Main.jsimport React from &quot;react&quot;;function Main(props) { return &amp;lt;div&amp;gt;메인&amp;lt;/div&amp;gt;;}export default Main;Profile.jsimport React from &quot;react&quot;;function Profile(props) { return &amp;lt;div&amp;gt;profile&amp;lt;/div&amp;gt;;}export default Profile;NotFound.jsimport React from &quot;react&quot;;function NotFound(props) { return &amp;lt;div&amp;gt;NotFound&amp;lt;/div&amp;gt;;}export default NotFound;실행npm starthttp://localhost:3000 url 을 실행하게 되면 react로 만들어진 기본 웹 사이트가 만들어집니다.이제 조금씩 수정해서 나만의 site를 만들어 봅시다. ^^" } ]
